<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label1.Text" xml:space="preserve">
    <value>Cele mai vechi urme de picturi rupestre au fost descoperite în peștera Kozarnika⁠ și datează de 1.400.000 de ani. Culturile preistorice de pe teritoriul Bulgariei cuprind cultura Hamangia din neolitic, cultura Vinča și cultura Varna din eneolitic (mileniul al V-lea î.e.n.). Necropola de la Varna oferă informații pentru înțelegerea ierarhiei sociale a celor mai vechi societăți de pe teritoriul Europei.

Conform istoriografiei Bulgariei, redată și de Encyclopædia Britannica, doar trei principale grupuri vechi au populat Bulgaria actuală : tracii (care conform acestei istoriografii nu au fost decât slab și marginal elenizați și romanizați, în ciuda relatărilor cronicarilor Theofilact din Simocatta, în Istoriile sale, sau Teofan Mărturisitorul în Cronografia sa și a studiilor istoricilor Constantin Jirecek, Thede Kahl sau Jernej Kopitar), apoi slavii sudici și însfârșit Proto-bulgarii. Tracii trăiau împărțiți în diferite triburi până când regele Teres⁠(d) le-a unit pe mare parte din ele în regatul Odris pe la 500 î.e.n. Ei au fost în cele din urmă cuceriți de Alexandru cel Mare în secolul al IV-lea î.e.n. și apoi de Imperiul Roman în 46 e.n. Cele mai răsăritene triburi de slavi sudici s-au stabilit treptat în Imperiul Roman de Răsărit, pe teritoriul Bulgariei moderne, în secolul al VI-lea, asimilându-i pe traci și pe slavi. În cele din urmă, elita bulgarilor din Asia Centrală i-a inclus pe aceștia într-un nou stat care s-a format după sosirea hanului Asparuh în Balcan.
sparuh, fiul hanului Vechii Bulgarii Mari, Kubrat, a migrat împreună cu mai multe triburi bulgare către cursul inferior al fluviilor Dunărea, Nistru și Nipru. După 670, el și-a extins regatul către peninsula Balcanică, trecând Dunărea cu o hoardă de 50.000 de oameni și a cucerit Moesia și Scythia Minor (Dobrogea) de la Imperiul Bizantin. Până la sfârșitul secolului al IX-lea, limba oficială a bulgarilor era limba greacă. Alfabetul introdus de Chiril și Medodiu a ghidat slavii și bulgarii spre o cultură de expresie slavă Limba sud-slavă locală a fost adoptată treptat și de bulgarii turanici cuceritori, care și-au păstrat dominația asupra majorității slave. Un tratat de pace semnat cu Bizanțul în 681 și stabilirea unei capitale permanente la Pliska, pe malul sudic al Dunării, a marcat începutul Primului Imperiu Bulgar.
</value>
  </data>
</root>